package com.bzkj.runtime.redis.service;import com.alibaba.dubbo.config.annotation.Service;import com.bzkj.exception.CommonSysException;import com.bzkj.exception.ExpCodeEnum;import com.bzkj.facade.redis.RedisService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.data.redis.RedisConnectionFailureException;import org.springframework.data.redis.core.RedisTemplate;import java.net.ConnectException;import java.util.Date;import java.util.List;import java.util.Set;import java.util.concurrent.TimeUnit;/** * @description: * @author: jensen * @date: created by 2019/9/11 1:17 */@Service(interfaceClass = RedisService.class,version = "1.0.0")@org.springframework.stereotype.Servicepublic class RedisServiceImpl implements RedisService {    @Autowired    private RedisTemplate redisTemplate;    @Override    public Object get(String key) {        return redisTemplate.opsForValue().get( key );    }    @Override    public List<Object> getAll(String key) {        return null;    }    @Override    public Object get(String key, String field) {        return null;    }    @Override    public void put(String key, Object value, long time, TimeUnit unit) {        redisTemplate.opsForValue().set( key, value, time, unit );    }    @Override    public void put( String key, Object value ) {        redisTemplate.opsForValue().set( key, value );    }    @Override    public Boolean hasKey(String key, String field) {        return null;    }    @Override    public void put(String key, String field, Object value) {    }    @Override    public void delete( String key ) {        redisTemplate.delete( key );    }    @Override    public void delete(String key, Object... field) {    }    @Override    public Set<String> keys( String pattern ) {        return redisTemplate.keys(pattern);    }    @Override    public long size(String pattern) {        return 0;    }    @Override    public boolean contain( String key ) {        boolean flag = false;        try {            flag = redisTemplate.hasKey( key );        }        catch ( Exception e ) {            if ( e instanceof ConnectException || e instanceof RedisConnectionFailureException) {                throw new CommonSysException(ExpCodeEnum.REDISERROR);            }            else {                e.printStackTrace();            }        }        return flag;    }    @Override    public long lpush(String key, Object value) {        return redisTemplate.opsForList().leftPush(key, value);    }    @Override    public Long lPushAll(String key, List list) {        return redisTemplate.opsForList().leftPushAll(key, list);    }    @Override    public Object rpop(String key) {        return  redisTemplate.opsForList().rightPop(key);    }    @Override    public Object lpop(String key) {        return redisTemplate.opsForList().leftPop(key);    }    @Override    public long remove(String key, Long count, Object value) {        return redisTemplate.opsForList().remove(key, count, value);    }    @Override    public long increment(String key, String field, Long delta) {        return redisTemplate.opsForHash().increment(key, field, delta);    }    @Override    public List<Object> rang(String key, Long start,  Long end) {        return redisTemplate.opsForList().range(key, start, end);    }    @Override    public long listsize(String key) {        return redisTemplate.opsForList().size(key);    }    @Override    public double incrementD(String key, String field, Double delta) {        // TODO Auto-generated method stub        return 0;    }    @Override    public long sadd(String key, Object values) {        // TODO Auto-generated method stub        return 0;    }    @Override    public Set<Object> smember(String key) {        // TODO Auto-generated method stub        return null;    }    @Override    public boolean expire(String key, Date date) {        return false;    }    @Override    public boolean expire(String key, long date, TimeUnit unit) {        // TODO Auto-generated method stub        return false;    }    @Override    public void atomicSet(String key, long value) {        // TODO Auto-generated method stub    }    @Override    public long atomicGet(String key) {        // TODO Auto-generated method stub        return 0;    }    @Override    public long incr(String key) {        // TODO Auto-generated method stub        return 0;    }    @Override    public long decr(String key) {        // TODO Auto-generated method stub        return 0;    }}